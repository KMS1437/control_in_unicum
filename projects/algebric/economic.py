#–≠–∫–æ–Ω–æ–º–∏–∫–∞
# -*- coding: utf-8 -*-

from telebot import types
import random
import telebot
import re
import sympy
import json
import os

bot = telebot.TeleBot("TOKEN")

moneys = 0

@bot.message_handler(commands=['plus'])
def add_money(message):
    global moneys
    amount = int(message.text.split()[1])
    moneys += amount
    bot.send_message(message.chat.id, "‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

@bot.message_handler(commands=['minus'])
def deduct_money(message):
    global moneys
    amount = int(message.text.split()[1])
    moneys -= amount
    bot.send_message(message.chat.id, "‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤—ã—á—Ç–µ–Ω—ã.")

@bot.message_handler(commands=['balance'])
def get_balance(message):
    bot.send_message(message.chat.id, f"üí∞ –ë–∞–ª–∞–Ω—Å: {moneys} —Ä—É–±.")

if os.path.exists('persons.json'):
    with open('persons.json', 'r') as file:
        persons = json.load(file)
        admins = persons['admins']
        bans = persons['bans']
else:
    print("–§–∞–π–ª persons.json –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")


@bot.message_handler(commands=['code'])
def send_code(message):
    user_id = message.from_user.id
    print(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name}:", user_id)
    if user_id in admins:
        with open('economic.py', 'r', encoding='utf-8') as file:
            bot.send_message(message.chat.id, "*–ö–æ–¥ –±–æ—Ç–∞:*", parse_mode="Markdown")
            bot.send_document(message.chat.id, file)

    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω. –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")


def replace_superscript(text):
    superscripts = {
        '0': '‚Å∞',
        '1': '¬π',
        '2': '¬≤',
        '3': '¬≥',
        '4': '‚Å¥',
        '5': '‚Åµ',
        '6': '‚Å∂',
        '7': '‚Å∑',
        '8': '‚Å∏',
        '9': '‚Åπ'
    }

    def replace_match(match):
        return superscripts.get(match.group(0)[1], match.group(0))

    pattern = re.compile(r"\^(\d)")
    result = re.sub(pattern, replace_match, text)
    return result

@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.send_message(message.chat.id, "*üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ –±–∞–ª–∞–Ω—Å—É –≤–∞—à–∏—Ö –¥–µ–Ω–µ–≥ –∏ —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –î–º–∏—Ç—Ä–∏—è –ë–æ—Ä–∏—Å–æ–≤–∏—á–∞. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?*",
                     parse_mode="Markdown")
    bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É:",
                     reply_markup=get_keyboard())


@bot.message_handler(commands=['info'])
def handle_info(message):
    bot.send_message(message.chat.id,
                     f'*–°–æ–∑–¥–∞—Ç–µ–ª—å:* @misakamozin\n*–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:* 27 –º–∞—Ä—Ç–∞ 2024\n*–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: * –ü—Ä–æ–µ–∫—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è "–¶–î–ù–ò–¢–¢ –ø—Ä–∏ –ö—É–∑–ì–¢–£ ¬´–£–Ω–∏–∫–£–º¬ª". –≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º —Å–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç –ø–æ –∞–ª–≥–µ–±—Ä–µ –∏–ª–∏ —Ñ–∏–∑–∏–∫–µ —Å –æ—Ç–≤–µ—Ç–æ–º –±–æ—Ç–∞.\n*–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: * telebot, random, re, sympy, json, os',
                     parse_mode="Markdown")


@bot.message_handler(func=lambda message: True)
def handle_text(message):
    user_input = message.text
    if message.from_user.id in bans:
        bot.send_message(message.chat.id, f"‚ö° –í–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, {message.from_user.first_name}.")
    elif user_input == "üèÜ –ú–∏—à–∞ –∏—Å–ø–æ—Ä—á–µ–Ω–Ω—ã–π –¥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏":
        bot.send_message(message.chat.id, f"‚öú –û–¥–Ω–æ–∑–Ω–∞—á–Ω–æ, {message.from_user.first_name}!")
    elif user_input == "üíÄ –ù–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –ü–∞—Å–∫–∞—Ä—å?":
        chance = random.randrange(1, 100)
        bot.send_message(message.chat.id, f"‚öú {message.from_user.first_name}, –≤—ã –ü–∞—Å–∫–∞—Ä—å –Ω–∞ {chance}%")
    elif user_input == "üíª –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º?":
        bot.send_message(message.chat.id,
                         f"‚öú {message.from_user.first_name}, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /minus, /plus, /balance.")
    elif user_input == "‚ùì –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞":
        markup = telebot.types.InlineKeyboardMarkup()
        button1 = telebot.types.InlineKeyboardButton("–ö–∞–Ω–∞–ª –ø–æ –ø—Ä–æ–µ–∫—Ç—É", url='https://t.me/project_unicum')
        markup.add(button1)
        bot.send_message(message.chat.id, "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=markup)
    else:
        try:
            if re.match(r'^[a-zA-Z0-9+\-*/^().= ]+$', user_input):
                if "=" in user_input:
                    def money(user_input):
                        try:
                            result = eval(user_input)
                            return result
                        except Exception as e:
                            return f"–û—à–∏–±–∫–∞: {e}"
                else:
                    result = sympy.sympify(user_input)
                    expanded_result = sympy.expand(result)
                    response = f"‚öúÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å: {moneys}"
            else:
                response = "üö´ Error: Invalid expression format."
        except Exception as e:
            response = f"üö´ Error: {e}"

        response = response.replace("*", "")
        bot.reply_to(message, response)


def get_keyboard():
    markup = types.ReplyKeyboardMarkup(row_width=2)
    button1 = types.KeyboardButton("üèÜ –ú–∏—à–∞ –∏—Å–ø–æ—Ä—á–µ–Ω–Ω—ã–π –¥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
    button2 = types.KeyboardButton("üíª –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º?")
    button3 = types.KeyboardButton("üíÄ –ù–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –ü–∞—Å–∫–∞—Ä—å?")
    button4 = types.KeyboardButton("‚ùì –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
    markup.add(button1, button2, button3, button4)
    return markup


if __name__ == "__main__":
    bot.polling(none_stop=True)
